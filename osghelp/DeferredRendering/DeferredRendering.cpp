// DeferredRendering.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <SigmaUtil/SulViewRTT.h>
#include <SigmaUtil/SulTestGeoms.h>
#include <SigmaUtil/SulScreenAlignedQuad.h>
#include <SigmaUtil/SulViewQuad.h>
#include <SigmaUtil/SulProgramShaders.h>
#include <SigmaUtil/SulLightManager.h>
#include <osgViewer/Viewer>

osg::Node* createScene( osgViewer::Viewer* viewer )
{
	osg::Group* root = new osg::Group;

	////////////////////////////////////////////////////////////////////////
	// create ligting stuff here
	////////////////////////////////////////////////////////////////////////

	CSulLightManager* lm = new CSulLightManager;

	// create a light over the cylinder
	CSulLightPoint* light = new CSulLightPoint( lm );
	light->setPosition( osg::Vec3(6.0f,0.0f,2.5f) );
	light->setDiffuseColor( osg::Vec4(1,0,0,1) );
	light->setConstantAtt( 0.0005f );
	light->setLinearAtt( 0.0f );
	light->setQuadraticAtt( 0.25f );
	light->setEnabled( true );
	lm->addChild( light );

	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////

	// create test geoms
	CSulTestGeoms* geoms = new CSulTestGeoms;
	root->addChild( geoms );

	// create a rtt view of the scene
	osg::Group* group = new osg::Group;
	lm->addChild( group );
	group->addChild( geoms );

	// deferred render scene
	CSulViewRTT* viewRTT = new CSulViewRTT( viewer, lm, CSulTexCam::DEFERRED_RENDERING );
	root->addChild( viewRTT );

	// show results from deferred rendering processing
	root->addChild( new CSulViewQuad( viewer, viewRTT->getTexture(1), 200 ) );	// show normals
	root->addChild( new CSulViewQuad( viewer, viewRTT->getTexture(2), 400 ) );	// show colors

	// shaders
	group->getOrCreateStateSet()->setAttribute( new CSulProgramShaders( "myshader.frag,myshader.vert" ) );

	//////////////////
	// composite
	//////////////////

	// quad to composite deferred rendering to and apply shaders to
	CSulViewQuad* alignedQuad = new CSulViewQuad( viewer );						// quad to fill the entire view in the new rtt
	CSulTexCam* viewComposite = new CSulTexCam( viewer, CSulTexCam::STANDARD );			// render the quad to a texture (here we can apply the composite shader)
	viewComposite->addChild( alignedQuad );												// tell the viewComposite to render the quad
//	viewComposite->getOrCreateStateSet()->setRenderBinDetails( 10000, "RenderBin" );
	root->addChild( viewComposite );													// add so we get processed

	root->addChild( new CSulViewQuad( viewer, viewComposite->getTexture(), 600 ) );	// draw the texture generated by the the viewComposite

	// add a shader to quad and set textures
	alignedQuad->getQuad()->getOrCreateStateSet()->setAttribute( 
		new CSulProgramShaders( 
			"mycomposite.frag,"
			"mycomposite.vert,"
			"shaders/sulFuncLightPoint.frag"
		) 
	);
	alignedQuad->getGeom()->setTexture( viewRTT->getTexture(0), 0 );
	alignedQuad->getGeom()->setTexture( viewRTT->getTexture(1), 1 );
	alignedQuad->getGeom()->setTexture( viewRTT->getTexture(2), 2 );

	osg::Uniform* u0 = new osg::Uniform( osg::Uniform::SAMPLER_2D , "texPositions" );
	u0->set( 0 );
	alignedQuad->getOrCreateStateSet()->addUniform( u0 );
	osg::Uniform* u1 = new osg::Uniform( osg::Uniform::SAMPLER_2D , "texNormals" );
	u1->set( 1 );
	alignedQuad->getOrCreateStateSet()->addUniform( u1 );
	osg::Uniform* u2 = new osg::Uniform( osg::Uniform::SAMPLER_2D , "texColors" );
	u2->set( 2 );
	alignedQuad->getOrCreateStateSet()->addUniform( u2 );

	// extra taken from lightmanager so second pass has access
	alignedQuad->getOrCreateStateSet()->addUniform( lm->getUniformTexLightData() );
	alignedQuad->getOrCreateStateSet()->addUniform( lm->getUniformCountLightPoints() );
	alignedQuad->getOrCreateStateSet()->addUniform( lm->getUniformCountLightSpots() );
	alignedQuad->getGeom()->setTexture( lm->getTextureData(), 7 );

	return root;
}

int _tmain(int argc, _TCHAR* argv[])
{
    // construct the viewer
    osg::ref_ptr<osgViewer::Viewer> viewer = new osgViewer::Viewer;

    // make the viewer create a 512x512 window and position it at 32, 32
    viewer->setUpViewInWindow( 32, 32, 800, 600 );

    // set the scene-graph data the viewer will render
    viewer->setSceneData( createScene(viewer) );

    // execute main loop
    return viewer->run();
}
